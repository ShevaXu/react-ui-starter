const path = require('path')
const pkg = require('./package.json')
const webpack = require('webpack')
const merge = require('webpack-merge')
const HTMLPlugin = require('html-webpack-plugin')
const Clean = require('clean-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')

const TARGET = process.env.npm_lifecycle_event
process.env.BABEL_ENV = TARGET

const PATHS = {
  src: path.join(__dirname, 'src'),
  build: path.join(__dirname, 'build')
}

const common = {
  resolve: {
    extensions: ['', '.js', '.jsx']
  },
  entry: PATHS.src,
  module: {
    loaders: [
      {
        test: /\.jsx?$/,
        // Enable caching for improved performance during development
        // It uses default OS directory by default
        loaders: ['babel?cacheDirectory'],
        include: PATHS.src
      },
      {
        test: /\.(ttf|eot|svg|woff(2)?)$/,
        loader: 'url-loader?limit=10000&name=fonts/[name].[ext]'
      }
    ]
  },
  plugins: [
    new HTMLPlugin({
      template: 'src/index.html',
      minify: { // Minifying it while it is parsed
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true
      },
      inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tag
    })
  ]
}

// development configuration
if (TARGET === 'start' || !TARGET) {
  module.exports = merge(common, {
    output: {
      path: PATHS.build,
      filename: 'js/bundle.js'
    },
    devtool: 'cheap-module-eval-source-map',
    devServer: {
      contentBase: PATHS.build,
      // Enable history API fallback so HTML5 History API based routing works.
      historyApiFallback: true,
      hot: true,
      inline: true,
      progress: true,
      // Display only errors to reduce the amount of output.
      stats: 'errors-only',
      // Parse host and port from env so this is easy to customize.
      host: process.env.HOST,
      port: process.env.PORT || 3000
    },
    module: {
      loaders: [
        {
          test: /\.css$/,
          loaders: ['style', 'css', 'postcss'],
          include: PATHS.src
        }
      ]
    },
    plugins: [
      new webpack.HotModuleReplacementPlugin()
    ]
  })
}

// production configuration
if (TARGET === 'build') {
  module.exports = merge(common, {
    entry: {
      src: PATHS.src,
      vendor: Object.keys(pkg.dependencies).filter(function (v) {
        // Exclude material-ui as it can be used component by component
        return v !== 'material-ui'
      })
    },
    output: {
      path: PATHS.build,
      filename: 'js/[name].[chunkhash].js',
      chunkFilename: 'js/[chunkhash].js'
    },
    module: {
      loaders: [
        {
          test: /\.css$/,
          loader: ExtractTextPlugin.extract('style', 'css', 'postcss'),
          include: PATHS.src
        }
      ]
    },
    plugins: [
      new webpack.optimize.CommonsChunkPlugin({
        names: ['vendor', 'manifest']
      }),
      new webpack.optimize.UglifyJsPlugin({
        compress: {
          warnings: false
        }
      }),
      new webpack.optimize.DedupePlugin(),
      new Clean([PATHS.build]),
      new ExtractTextPlugin('styles.[chunkhash].css'),
      // Setting DefinePlugin affects React library size!
      new webpack.DefinePlugin({
        'process.env.NODE_ENV': '"production"'
      })
    ]
  })
}
